@startuml
' Improve layout and spacing for better line separation
left to right direction
skinparam packageStyle rectangle
skinparam padding 15
skinparam classFontSize 10
skinparam monochrome true
skinparam classAttributeIconSize 0
skinparam nodesep 80
skinparam ranksep 80

' Crate: entities
package "entities" #DDDDDD {
  ' Entities
  class Category {
    +Uuid id_category
    +String name
    +i32 min_age
    +i32 max_age
  }
  class CategoryCreation {
    +String name
    +i32 min_age
    +i32 max_age
  }
  class Level {
    +LevelName level_name
  }
  class CategoryRequirement {
    +Uuid id_category_requirement
    +Uuid id_category
    +String requirement_description
    +LevelName required_level
  }
  class Tournament {
    +Uuid id_tournament
    +String name
    +Uuid id_category
    +NaiveDateTime start_datetime
    +NaiveDateTime end_datetime
  }
  class TournamentCreation {
    +String name
    +Uuid id_category
    +NaiveDateTime start_datetime
    +NaiveDateTime end_datetime
  }
  class User {
    +Uuid id_user
    +String first_name
    +String last_name
    +NaiveDate birth_date
    +String email
    +String password
    +URol user_rol
  }
  class UserCreation {
    +String first_name
    +String last_name
    +NaiveDate birth_date
    +String email
    +String password
  }
  class UserInfo {
    +Uuid id_user
    +String first_name
    +String last_name
    +String email
    +URol user_rol
  }
  class UserLogInInfo {
    +String identifier
    +String password
  }
  class UserCategory {
    +Uuid id_user
    +Uuid id_category
    +LevelName user_level
  }
  class Training {
    +Uuid id_training
    +String name
    +Uuid id_category
  }
  class Tuition {
    +Uuid id_tuition
    +Uuid id_user
    +f64 amount
  }
  class Request {
    +Uuid id
    +Uuid requester_id
    +String requested_command
  }
  
  ' Enums
  enum LevelName <<enumeration>> {
    BEGINNER
    AMATEUR
    PROFESSIONAL
  }
  enum URol <<enumeration>> {
    USER
    ADMIN
    TRAINER
  }
  
  ' Relationships within entities
  CategoryCreation --> Category : <<create>>
  TournamentCreation --> Tournament : <<create>>
  UserCreation --> User : <<create>>
  UserInfo --> User : <<project>>
  Tournament --> Category : id_category
  UserCategory --> User : id_user
  UserCategory --> Category : id_category
  UserCategory --> LevelName : user_level
  User --> URol : user_rol
  UserInfo --> URol : user_rol
  CategoryRequirement --> Category : id_category
  CategoryRequirement --> LevelName : required_level
}

' Crate: use_cases
package "use_cases" #EEEEEE {
  ' Arrange services horizontally using left-to-right layout
  together {
    package "category_service" {
      interface CategoryRepository <<interface>> {
        +create_category(category: &Category) -> Result<()>
        +get_category_by_id(id: Uuid) -> Result<Option<Category>>
        +update_category(category: &Category) -> Result<()>
        +delete_category(id: Uuid) -> Result<()>
        +list_categories() -> Result<Vec<Category>>
        +get_category_by_name(name: &str) -> Result<Option<Category>>
      }
      interface CategoryRequirementRepository <<interface>> {
        +create_category_requirement(requirement: &CategoryRequirement) -> Result<()>
        +get_category_requirements(category_id: Uuid) -> Result<Vec<CategoryRequirement>>
      }
      interface UserCategoryRepository <<interface>> {
        +get_user_category(id_user: Uuid, id_category: Uuid) -> Result<Option<UserCategory>>
        +user_has_category(id_user: Uuid, id_category: Uuid) -> Result<bool>
        +create_user_category(user_category: &UserCategory) -> Result<()>
        +get_user_categories(user_id: Uuid) -> Result<Vec<UserCategory>>
      }
      class CategoryService {
        -Arc<dyn CategoryRepository> category_repo
        -Arc<dyn CategoryRequirementRepository> requirement_repo
        -Arc<dyn UserCategoryRepository> user_category_repo
        -UserService user_service
        +add_category(category: Category) -> Result<()>
        +get_category_by_id(id: Uuid) -> Result<Category>
        +update_category(category: &Category) -> Result<()>
        +delete_category(id: Uuid) -> Result<()>
        +get_all_categories() -> Result<Vec<Category>>
        +add_category_requirement(category_req: &CategoryRequirement) -> Result<()>
        +get_category_requirements(category_id: Uuid) -> Result<Vec<CategoryRequirement>>
        +get_user_category(user_id: Uuid, category_id: Uuid) -> Result<Option<UserCategory>>
        +user_has_category(user_id: Uuid, category_id: Uuid) -> Result<bool>
        +get_user_categories(user_id: Uuid) -> Result<Vec<UserCategory>>
        +add_user_to_category(user_id: Uuid, category_id: Uuid) -> Result<()>
      }
      enum CategoryError <<enumeration>> {
        UnknownDatabaseError
        CategoryNotFound
        CategoryAlreadyExists
        InvalidAgeRange
        MissingName
        RequirementNotFound
        UserAlreadyHasCategory
        UserDoesNotMeetRequirements
        LevelNotFound
        InvalidUserAge
        InvalidRequirementLevel
        UserServiceError
      }
      CategoryService --> CategoryRepository
      CategoryService --> CategoryRequirementRepository
      CategoryService --> UserCategoryRepository
      CategoryService --> CategoryError : throws
      CategoryService --> Category
      CategoryService --> CategoryRequirement
      CategoryService --> UserCategory
    }

    package "user_service" {
      interface UserRepository <<interface>> {
        +create_user(user: &User) -> Result<()>
        +get_user_by_id(id: Uuid) -> Result<Option<User>>
        +get_user_id_by_email(email: &str) -> Result<Option<Uuid>>
        +get_user_id_by_phone(phone_number: &str) -> Result<Option<Uuid>>
        +get_user_id_by_identification(identification_number: &str, identification_type: &IdType) -> Result<Option<Uuid>>
        +update_user(user: &User) -> Result<()>
        +delete_user(id: Uuid) -> Result<()>
        +list_users() -> Result<Vec<User>>
      }
      interface PasswordHasher <<interface>> {
        +hash(content: &str) -> Result<String>
        +verify(original: &str, hashed: &str) -> Result<bool>
      }
      class UserService {
        -Arc<dyn UserRepository> user_repo
        -Arc<dyn PasswordHasher> password_hasher
        +register_user(user_creation: UserCreation) -> Result<()>
        +get_user_by_id(user_id: Uuid) -> Result<UserInfo>
        +get_all_users() -> Result<Vec<UserInfo>>
        +log_in_user(user_log_in_info: &UserLogInInfo) -> Result<LogInResponse>
      }
      enum UserError <<enumeration>> {
        UnknownDatabaseError
        UserIdDontExist
        ErrorHashing
        ErrorVerificationHash
        InvalidPassword
        EmailAlreadyExists
        PhoneAlreadyExists
        DocumentAlreadyExists
        InvalidIdentifier
      }
      UserService --> UserRepository
      UserService --> PasswordHasher
      UserService --> UserError : throws
      UserService --> UserCreation
      UserService --> UserInfo
      UserService --> UserLogInInfo
    }

    package "tournament_service" {
      interface TournamentRepository <<interface>> {
        +create_tournament(tournament: &Tournament) -> Result<()>
        +get_tournament_by_id(id: Uuid) -> Result<Option<Tournament>>
        +update_tournament(tournament: &Tournament) -> Result<()>
        +delete_tournament(id: Uuid) -> Result<()>
        +list_tournaments() -> Result<Vec<Tournament>>
      }
      interface TournamentRegistrationRepository <<interface>> {
        +register_user_for_tournament(registration: &TournamentRegistration) -> Result<()>
        +get_tournament_registrations(tournament_id: Uuid) -> Result<Vec<TournamentRegistration>>
      }
      interface TournamentAttendanceRepository <<interface>> {
        +record_tournament_attendance(attendance: &TournamentAttendance) -> Result<()>
        +get_tournament_attendance(tournament_id: Uuid) -> Result<Vec<TournamentAttendance>>
        +update_tournament_position(tournament_id: Uuid, user_id: Uuid, position: i32) -> Result<()>
      }
      class TournamentService {
        -Arc<dyn TournamentRepository> tournament_repo
        -Arc<dyn TournamentRegistrationRepository> registration_repo
        -Arc<dyn TournamentAttendanceRepository> attendance_repo
        -CategoryService category_service
        +create_tournament(tournament: TournamentCreation) -> Result<()>
        +get_tournament(id: Uuid) -> Result<Tournament>
        +update_tournament(tournament: Tournament) -> Result<()>
        +delete_tournament(id: Uuid) -> Result<()>
        +list_tournaments() -> Result<Vec<Tournament>>
        +register_user(registration: TournamentRegistration) -> Result<()>
        +record_attendance(attendance: TournamentAttendance) -> Result<()>
        +update_position(tournament_id: Uuid, user_id: Uuid, position: i32) -> Result<()>
        +get_eligible_tournaments(user_id: Uuid) -> Result<Vec<Tournament>>
      }
      enum TournamentError <<enumeration>> {
        UnknownDatabaseError
        TournamentNotFound
        UserNotRegistered
        UserAlreadyRegistered
        InvalidDates
        InvalidCategory
        NegativePosition
        PositionAlreadyTaken
        UserDidNotAttend
        UserDoesNotMeetCategoryRequirements
        CategoryServiceError
      }
      TournamentService --> TournamentRepository
      TournamentService --> TournamentRegistrationRepository
      TournamentService --> TournamentAttendanceRepository
      TournamentService --> TournamentError : throws
      TournamentService --> CategoryService
      TournamentService --> Tournament
      TournamentService --> TournamentCreation
    }

    package "training_service" {
      interface TrainingRepository <<interface>> {
        +create_training(training: &Training) -> Result<()>
        +get_training_by_id(id: Uuid) -> Result<Option<Training>>
        +update_training(training: &Training) -> Result<()>
        +delete_training(id: Uuid) -> Result<()>
        +list_trainings() -> Result<Vec<Training>>
      }
      interface TrainingRegistrationRepository <<interface>> {
        +register_user_for_training(registration: &TrainingRegistration) -> Result<()>
        +get_training_registrations(training_id: Uuid) -> Result<Vec<TrainingRegistration>>
        +mark_training_attendance(training_id: Uuid, user_id: Uuid, attended: bool) -> Result<()>
      }
      class TrainingService {
        -Arc<dyn TrainingRepository> training_repo
        -Arc<dyn TrainingRegistrationRepository> registration_repo
        -CategoryService category_service
        +create_training(training: &Training) -> Result<()>
        +get_training(id: Uuid) -> Result<Training>
        +update_training(training: &Training) -> Result<()>
        +delete_training(id: Uuid) -> Result<()>
        +list_trainings() -> Result<Vec<Training>>
        +register_user(registration: TrainingRegistration) -> Result<()>
        +mark_attendance(training_id: Uuid, user_id: Uuid, attended: bool) -> Result<()>
        +get_eligible_trainings(user_id: Uuid) -> Result<Vec<Training>>
      }
      enum TrainingError <<enumeration>> {
        UnknownDatabaseError
        TrainingNotFound
        UserAlreadyRegistered
        UserDoesNotMeetCategoryRequirements
        InvalidDates
        UserNotRegistered
        RegistrationNotFound
        CategoryServiceError
      }
      TrainingService --> TrainingRepository
      TrainingService --> TrainingRegistrationRepository
      TrainingService --> TrainingError : throws
      TrainingService --> CategoryService
      TrainingService --> Training
    }

    package "tuition_service" {
      interface TuitionRepository <<interface>> {
        +record_tuition_payment(tuition: &Tuition) -> Result<()>
        +get_tuition_by_id(id: Uuid) -> Result<Option<Tuition>>
        +list_tuition_payments_for_user(user_id: Uuid) -> Result<Vec<Tuition>>
        +list_all_tuition_payments() -> Result<Vec<Tuition>>
        +has_active_tuition(user_id: Uuid) -> Result<bool>
      }
      class TuitionService {
        -Arc<dyn TuitionRepository> tuition_repo
        +pay_tuition(user_id: Uuid, amount: f64) -> Result<()>
        +has_active_tuition(user_id: Uuid) -> Result<bool>
        +get_user_tuitions(user_id: Uuid) -> Result<Vec<Tuition>>
        +get_all_tuitions() -> Result<Vec<Tuition>>
      }
      enum TuitionError <<enumeration>> {
        UnknownDatabaseError
        ActiveTuitionExists
        InvalidAmount
        TuitionNotFound
      }
      TuitionService --> TuitionRepository
      TuitionService --> TuitionError : throws
      TuitionService --> Tuition
    }

    package "request_service" {
      interface RequestRepository <<interface>> {
        +create_request(request: &Request) -> Result<()>
        +get_request_by_id(id: Uuid) -> Result<Option<Request>>
        +update_request(request: &Request) -> Result<()>
        +list_requests() -> Result<Vec<Request>>
        +list_requests_by_user(user_id: Uuid) -> Result<Vec<Request>>
      }
      class RequestService {
        -Arc<dyn RequestRepository> request_repo
        +create_request(requester_id: Uuid, requested_command: String, justification: String) -> Result<()>
        +complete_request(request_id: Uuid, approver_id: Uuid, approved: bool) -> Result<()>
        +list_requests() -> Result<Vec<Request>>
        +list_user_requests(user_id: Uuid) -> Result<Vec<Request>>
        +get_request_by_id(id: Uuid) -> Result<Option<Request>>
      }
      enum RequestError <<enumeration>> {
        UnknownDatabaseError
        RequestNotFound
        RequestAlreadyCompleted
        SelfApprovalNotAllowed
        InvalidApprover
      }
      RequestService --> RequestRepository
      RequestService --> RequestError : throws
      RequestService --> Request
    }
  }
}

package "turso_db" #CCCCCC {
  class TursoDb {
    -Arc<libsql::Database> db
    -Option<Connection> conn
    +from(url: &str, token: &str) -> Result<Self, Box<dyn Error>> {async}
    +get_connection() -> Result<Connection, Box<dyn Error>> {async}
    +get_connection_with_error<E>(error_builder: Fn(String) -> E) -> Result<Connection, E> {async}
    +query_one_with_error<T,E>(sql: &str, params: IntoParams, error_builder: Fn(String) -> E) -> Result<Option<T>, E> {async}
    +query_many_with_error<T,E>(sql: &str, params: IntoParams, error_builder: Fn(String) -> E) -> Result<Vec<T>, E> {async}
    +execute_with_error<E>(sql: &str, params: IntoParams, error_builder: Fn(String) -> E) -> Result<(), E> {async}
    +get_values_from_rows<T,E>(rows: Result<Rows, Error>, error_builder: Fn(String) -> E) -> Result<Vec<T>, E> {async}
    +get_value_from_row<T,E>(rows: Result<Rows, Error>, error_builder: Fn(String) -> E) -> Result<Option<T>, E> {async}
    +create_test_user(user_id: Uuid) -> Result<(), Box<dyn Error>> {async}
  }
  
  class TestDbBuilder {
    -Arc<libsql::Database> db
    -Connection conn
    +create() -> Self {async}
    +create_full() -> TursoDb {async}
    +print_tables() {async}
    +apply_doc_types() -> Self {async}
    +apply_user_roles() -> Self {async}
    +apply_levels() -> Self {async}
    +build() -> TursoDb
  }
  
  TursoDb --> CategoryRepository : implements
  TursoDb --> UserRepository : implements
  TursoDb --> TournamentRepository : implements
  TursoDb --> UserCategoryRepository : implements
  TursoDb --> TrainingRepository : implements
  TursoDb --> TuitionRepository : implements
  TursoDb --> RequestRepository : implements
  TursoDb --> CategoryRequirementRepository : implements
}

' Crate: http_api
package "http_api" #BBBBBB {
  class UserInfoAuth {
    +Uuid user_id
    +URol user_rol
  }
  UserInfoAuth --> URol : user_rol
}

' Crate: bcrypt_hasher
package "bcrypt_hasher" #AAAAAA {
  class BcryptHasher {
    +hash(content: &str) -> Result<String>
    +verify(original: &str, hashed: &str) -> Result<bool>
  }
  BcryptHasher --> PasswordHasher : implements
}

' Cross-Package Relationships
CategoryService --> UserService : uses
CategoryService --> Category
CategoryService --> CategoryRequirement
CategoryService --> UserCategory
UserService --> UserCreation
UserService --> UserInfo
UserService --> UserLogInInfo
TournamentService --> CategoryService : uses
TournamentService --> TournamentCreation
TournamentService --> Tournament
TrainingService --> CategoryService : uses
TrainingService --> Training
TuitionService --> Tuition
RequestService --> Request
BcryptHasher --> UserService : used by

' Note for clarity
note right of use_cases
  All service methods are now included.
  TursoDb lists only direct methods.
  CategoryRequirement connections are corrected.
end note

@enduml